digraph G {

fontname = "Bitstream Vera Sans"
fontsize = 8
rankdir=BT

node [shape = "record"]
ClassTClassDeclarationVisitor [label = "{ClassDeclarationVisitor|ClassDeclarationVisitor : String\lClassDeclarationVisitor : String\lClassDeclarationVisitor : String[]\lClassDeclarationVisitor : List\<ClassNode\>\lClassDeclarationVisitor : List\<IEdge\>\lClassDeclarationVisitor : ClassNode\lClassDeclarationVisitor : ClassNode\lClassDeclarationVisitor : String\l|visit(int, int, String, String, String, String[]) : void\lgetName() : String\laddExtendsArrow(StringString) : void\laddInheritanceArrow(StringString) : void\linPackage(String) : boolean\l}"]
node [shape = "record"]
ClassTClassFieldVisitor [label = "{ClassFieldVisitor|ClassFieldVisitor : ClassNode\lClassFieldVisitor : List\<IEdge\>\lClassFieldVisitor : String\l|visitField(int, String, String, String, Object) : FieldVisitor\laddFieldToNode(StringString) : void\laddFieldToNode(StringStringString) : void\laddNewUses(StringString) : void\linPackage(String) : boolean\l}"]
node [shape = "record"]
ClassTClassMethodInstanceVisitor [label = "{ClassMethodInstanceVisitor|ClassMethodInstanceVisitor : List\<ClassNode\>\lClassMethodInstanceVisitor : NodeMethod\lClassMethodInstanceVisitor : ClassNode\l|visitMethodInsn(int, String, String, String, boolean) : void\lvisitTypeInsn(int, String) : void\lvisitFieldInsn(int, StringStringString) : void\laddAccessLevel(int) : String\laddReturnType(String) : String\laddArguments(String) : List\lgetAddedClassNode(String) : ClassNode\laddGeneratedClassNode(INodeINode) : void\l}"]
node [shape = "record"]
ClassTClassMethodVisitor [label = "{ClassMethodVisitor|ClassMethodVisitor : ClassNode\lClassMethodVisitor : List\<IEdge\>\lClassMethodVisitor : List\<ClassNode\>\lClassMethodVisitor : String\l|visitMethod(int, String, String, String, String[]) : MethodVisitor\laddAccessLevel(int) : String\laddReturnType(String) : String\laddArguments(String) : List\laddNewUses(StringString) : void\laddNewAssociationArrow(StringString) : void\linPackage(String) : boolean\l}"]
node [shape = "record"]
ClassTClassNode [label = "{ClassNode|ClassNode : String\lClassNode : String\lClassNode : List\<NodeField\>\lClassNode : List\<NodeMethod\>\l|getName() : String\lgetType() : String\lgetMethods() : List\lgetFields() : List\laccept(IVisitor) : void\laddField(NodeField) : void\laddMethod(NodeMethod) : void\ltoString() : String\l}"]
node [shape = "record"]
ClassTCreator [label = "{Creator||main(String[]) : void\lmouseClicked(MouseEvent) : void\lmousePressed(MouseEvent) : void\lmouseReleased(MouseEvent) : void\lmouseEntered(MouseEvent) : void\lmouseExited(MouseEvent) : void\l}"]
node [shape = "record"]
ClassTDesignParser [label = "{DesignParser|DesignParser : String\lDesignParser : ExtensionDot\lDesignParser : ExtensionSQ\l|main(String[]) : void\lgetListOfFiles() : List\loutputDSFile(List, OutputSDFile, int) : void\lrecursiveIterDSFile(NodeMethod, OutputSDFile, int) : void\l}"]
node [shape = "record"]
ClassTEdge [label = "{Edge|Edge : String\lEdge : String\lEdge : String\lEdge : String\l|getTo() : String\lgetFrom() : String\lgetLine() : String\lgetArrow() : String\laccept(IVisitor) : void\ltoString() : String\l}"]
node [shape = "record"]
ClassTExtensionDot [label = "{ExtensionDot|ExtensionDot : String\lExtensionDot : String\l|getOutputLocation() : String\lgetExtension() : String\l}"]
node [shape = "record"]
ClassTExtensionSQ [label = "{ExtensionSQ|ExtensionSQ : int\lExtensionSQ : String\lExtensionSQ : String\lExtensionSQ : String\lExtensionSQ : String\lExtensionSQ : String\l|getOutputLocation() : String\lgetIterations() : int\lgetClassName() : String\lgetPack() : String\lgetMethodName() : String\lgetExtension() : String\l}"]
node [shape = "record"]
ClassTFileGenerator [label = "{FileGenerator|FileGenerator : String\lFileGenerator : String\l|}"]
node [shape = "record"]
ClassTFileOutputType [label = "{FileOutputType||getExtension() : String\lgetOutputLocation() : String\l}"]
node [shape = "record"]
ClassTFirstASM [label = "{FirstASM|FirstASM : String\l|main(String[]) : void\l}"]
node [shape = "record"]
ClassTIEdge [label = "{IEdge||getTo() : String\lgetFrom() : String\lgetLine() : String\lgetArrow() : String\l}"]
node [shape = "record"]
ClassTINode [label = "{INode||getName() : String\lgetType() : String\lgetMethods() : List\l}"]
node [shape = "record"]
ClassTINodeElement [label = "{INodeElement||getName() : String\lgetReturnType() : String\lgetContainingClass() : INode\l}"]
node [shape = "record"]
ClassTITraversable [label = "{ITraversable||accept(IVisitor) : void\l}"]
node [shape = "record"]
ClassTIVisitor [label = "{IVisitor||visitNodes(ClassNode) : void\lvisitEdges(IEdge) : void\lvisitMethod(NodeMethod) : void\lvisitField(NodeField) : void\l}"]
node [shape = "record"]
ClassTNodeField [label = "{NodeField|NodeField : String\lNodeField : String\lNodeField : INode\lNodeField : INode\l|getName() : String\lgetReturnType() : String\lgetContainingClass() : INode\lgetCreatedClass() : INode\ltoString() : String\laccept(IVisitor) : void\l}"]
node [shape = "record"]
ClassTNodeMethod [label = "{NodeMethod|NodeMethod : String\lNodeMethod : String\lNodeMethod : List\<String\>\lNodeMethod : String\lNodeMethod : INode\lNodeMethod : INode\lNodeMethod : List\<NodeMethod\>\lNodeMethod : List\<NodeField\>\l|getParentClassNode() : INode\lsetParentClassNode(INode) : void\lgetClassNodeFieldsCreated() : List\laddCreatedNode(NodeField) : void\laddPotentialDuplicateMethod(NodeMethod, ArrayList) : void\lgetMethodsCalled() : List\laddMethodCalled(NodeMethod) : void\lgetContainingClass() : INode\lgetArgs() : List\lgetSecurity() : String\lgetName() : String\lgetReturnType() : String\laccept(IVisitor) : void\ltoString() : String\l}"]
node [shape = "record"]
ClassTOutputDotFile [label = "{OutputDotFile|OutputDotFile : OutputStream\lOutputDotFile : String\l|write(String) : void\lstartUp() : void\lend() : void\lvisitNodes(ClassNode) : void\lvisitEdges(IEdge) : void\lvisitMethod(NodeMethod) : void\lvisitField(NodeField) : void\linOurPackage(String) : boolean\lhasInvalidCharacters(String) : boolean\l}"]
node [shape = "record"]
ClassTOutputSDFile [label = "{OutputSDFile|OutputSDFile : OutputStream\l|write(String) : void\lvisitNodes(ClassNode) : void\lvisitEdges(IEdge) : void\lvisitMethod(NodeMethod) : void\lvisitField(NodeField) : void\l}"]
node [shape = "record"]
ClassTUMLGenerator [label = "{UMLGenerator|UMLGenerator : List\<ClassNode\>\lUMLGenerator : List\<IEdge\>\lUMLGenerator : List\<String\>\lUMLGenerator : String\l|generateClassList() : void\lgenerateNodes() : void\lwrite() : void\l}"]
edge [arrowhead = "vee" style = "solid" ]
ClassTClassDeclarationVisitor -> ClassTClassNode
edge [arrowhead = "vee" style = "solid" ]
ClassTClassFieldVisitor -> ClassTClassNode
edge [arrowhead = "vee" style = "solid" ]
ClassTClassMethodInstanceVisitor -> ClassTNodeMethod
edge [arrowhead = "vee" style = "solid" ]
ClassTClassMethodInstanceVisitor -> ClassTClassNode
edge [arrowhead = "vee" style = "solid" ]
ClassTClassMethodVisitor -> ClassTClassNode
edge [arrowhead = "normal" style = "dashed" ]
ClassTClassNode -> ClassTINode
edge [arrowhead = "vee" style = "solid" ]
ClassTDesignParser -> ClassTExtensionDot
edge [arrowhead = "vee" style = "solid" ]
ClassTDesignParser -> ClassTExtensionSQ
edge [arrowhead = "normal" style = "dashed" ]
ClassTEdge -> ClassTIEdge
edge [arrowhead = "normal" style = "dashed" ]
ClassTExtensionDot -> ClassTFileOutputType
edge [arrowhead = "normal" style = "dashed" ]
ClassTExtensionSQ -> ClassTFileOutputType
edge [arrowhead = "normal" style = "dashed" ]
ClassTIEdge -> ClassTITraversable
edge [arrowhead = "normal" style = "dashed" ]
ClassTINode -> ClassTITraversable
edge [arrowhead = "normal" style = "dashed" ]
ClassTINodeElement -> ClassTITraversable
edge [arrowhead = "vee" style = "solid" ]
ClassTINodeElement -> ClassTINode
edge [arrowhead = "normal" style = "dashed" ]
ClassTNodeField -> ClassTINodeElement
edge [arrowhead = "vee" style = "solid" ]
ClassTNodeField -> ClassTINode
edge [arrowhead = "normal" style = "dashed" ]
ClassTNodeMethod -> ClassTINodeElement
edge [arrowhead = "vee" style = "solid" ]
ClassTNodeMethod -> ClassTINode
edge [arrowhead = "normal" style = "dashed" ]
ClassTOutputDotFile -> ClassTIVisitor
edge [arrowhead = "normal" style = "dashed" ]
ClassTOutputSDFile -> ClassTIVisitor
edge [arrowhead = "normal" style = "solid" ]
ClassTUMLGenerator -> ClassTFileGenerator
}