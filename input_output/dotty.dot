digraph G {

fontname = "Bitstream Vera Sans"
fontsize = 8
rankdir=BT

node [shape = "record" ]
ClassTCollections [label = "{Collections|BINARYSEARCH_THRESHOLD : int\lREVERSE_THRESHOLD : int\lSHUFFLE_THRESHOLD : int\lFILL_THRESHOLD : int\lROTATE_THRESHOLD : int\lCOPY_THRESHOLD : int\lREPLACEALL_THRESHOLD : int\lINDEXOFSUBLIST_THRESHOLD : int\lr : Random\lEMPTY_SET : Set\lEMPTY_LIST : List\lEMPTY_MAP : Map\l|<init>() : void\lsort(List) : void\lsort(List, Comparator) : void\lbinarySearch(List, Object) : int\lindexedBinarySearch(List, Object) : int\literatorBinarySearch(List, Object) : int\lget(ListIterator, int) : Object\lget(ListIterator, int) : java.lang.Object\lbinarySearch(List, Object, Comparator) : int\lindexedBinarySearch(List, Object, Comparator) : int\literatorBinarySearch(List, Object, Comparator) : int\lreverse(List) : void\lswap(List, intint) : void\lshuffle(List) : void\lshuffle(List, Random) : void\lswap(Object[], intint) : void\lfill(List, Object) : void\lcopy(ListList) : void\lmin(Collection) : java.lang.Object\lmin(Collection, Comparator) : java.lang.Object\lmin(Collection) : Object\lmax(Collection) : java.lang.Object\lmax(Collection, Comparator) : java.lang.Object\lmax(Collection) : Object\lrotate(List, int) : void\lrotate1(List, int) : void\lrotate2(List, int) : void\lreplaceAll(List, ObjectObject) : boolean\lindexOfSubList(ListList) : int\leq(ObjectObject) : boolean\llastIndexOfSubList(ListList) : int\lunmodifiableCollection(Collection) : Collection\l<init>(Collection) : void\lunmodifiableSet(Set) : Set\l<init>(Set) : void\lunmodifiableSortedSet(SortedSet) : SortedSet\l<init>(SortedSet) : void\lunmodifiableNavigableSet(NavigableSet) : NavigableSet\l<init>(NavigableSet) : void\lunmodifiableList(List) : List\l<init>(List) : void\lunmodifiableMap(Map) : Map\l<init>(Map) : void\lunmodifiableSortedMap(SortedMap) : SortedMap\l<init>(SortedMap) : void\lunmodifiableNavigableMap(NavigableMap) : NavigableMap\l<init>(NavigableMap) : void\lsynchronizedCollection(Collection) : Collection\lsynchronizedCollection(Collection, Object) : Collection\l<init>(Collection, Object) : void\lsynchronizedSet(Set) : Set\lsynchronizedSet(Set, Object) : Set\l<init>(Set, Object) : void\lsynchronizedSortedSet(SortedSet) : SortedSet\lsynchronizedNavigableSet(NavigableSet) : NavigableSet\lsynchronizedList(List) : List\lsynchronizedList(List, Object) : List\l<init>(List, Object) : void\lsynchronizedMap(Map) : Map\lsynchronizedSortedMap(SortedMap) : SortedMap\lsynchronizedNavigableMap(NavigableMap) : NavigableMap\lcheckedCollection(Collection, Class) : Collection\l<init>(Collection, Class) : void\lzeroLengthArray(Class) : java.lang.Object[]\lcheckedQueue(Queue, Class) : Queue\l<init>(Queue, Class) : void\lcheckedSet(Set, Class) : Set\l<init>(Set, Class) : void\lcheckedSortedSet(SortedSet, Class) : SortedSet\l<init>(SortedSet, Class) : void\lcheckedNavigableSet(NavigableSet, Class) : NavigableSet\l<init>(NavigableSet, Class) : void\lcheckedList(List, Class) : List\l<init>(List, Class) : void\lcheckedMap(Map, ClassClass) : Map\l<init>(Map, ClassClass) : void\lcheckedSortedMap(SortedMap, ClassClass) : SortedMap\l<init>(SortedMap, ClassClass) : void\lcheckedNavigableMap(NavigableMap, ClassClass) : NavigableMap\l<init>(NavigableMap, ClassClass) : void\lemptyIterator() : Iterator\lemptyListIterator() : ListIterator\lemptyEnumeration() : Enumeration\lemptySet() : Set\lemptySortedSet() : SortedSet\laccess$000() : NavigableSet\lemptyNavigableSet() : NavigableSet\lemptyList() : List\lemptyMap() : Map\lemptySortedMap() : SortedMap\laccess$100() : Collections$UnmodifiableNavigableMap$EmptyNavigableMap\lemptyNavigableMap() : NavigableMap\lsingleton(Object) : Set\l<init>(Object) : void\lsingletonIterator(Object) : Iterator\lsingletonSpliterator(Object) : Spliterator\lsingletonList(Object) : List\lsingletonMap(ObjectObject) : Map\l<init>(ObjectObject) : void\lnCopies(int, Object) : List\l<init>(int, Object) : void\lreverseOrder() : Comparator\lreverseOrder(Comparator) : Comparator\l<init>(Comparator) : void\lenumeration(Collection) : Enumeration\llist(Enumeration) : ArrayList\lfrequency(Collection, Object) : int\ldisjoint(CollectionCollection) : boolean\laddAll(Collection, Object[]) : boolean\lnewSetFromMap(Map) : Set\lasLifoQueue(Deque) : Queue\l<init>(Deque) : void\l<clinit>() : void\l<init>(Collections$1) : void\l}"]
node [shape = "record" ]
ClassTObject [label = "{Object||}"]
node [shape = "record" ]
ClassTList [label = "{List||sort(Comparator) : void\lsize() : int\lget(int) : Object\llistIterator() : ListIterator\lnextIndex() : int\lnext() : Object\lprevious() : Object\llistIterator(int) : ListIterator\lset(Object) : void\ltoArray() : Object[]\lset(int, Object) : Object\lsubList(intint) : List\l<init>() : void\ladd(Object) : boolean\l}"]
node [shape = "record" ]
ClassTComparator [label = "{Comparator||compare(ObjectObject) : int\l}"]
node [shape = "record" ]
ClassTRandom [label = "{Random||<init>() : void\lnextInt(int) : int\l}"]
node [shape = "record" ]
ClassTCollection [label = "{Collection||iterator() : Iterator\lsize() : int\lcontains(Object) : boolean\ladd(Object) : boolean\l}"]
node [shape = "record" ]
ClassTIterator [label = "{Iterator||next() : Object\lhasNext() : boolean\l}"]
node [shape = "record" ]
ClassTSet [label = "{Set||}"]
node [shape = "record" ]
ClassTMap [label = "{Map||}"]
node [shape = "record" ]
ClassTEnumeration [label = "{Enumeration||hasMoreElements() : boolean\lnextElement() : Object\l}"]
edge [arrowhead = empty style = solid ]
ClassTCollections -> ClassTObject
edge [arrowhead = vee style = dashed ]
ClassTCollections -> ClassTRandom
edge [arrowhead = vee style = dashed ]
ClassTCollections -> ClassTSet
edge [arrowhead = vee style = dashed ]
ClassTCollections -> ClassTList
edge [arrowhead = vee style = dashed ]
ClassTCollections -> ClassTMap
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTCollection
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTSortedSet
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTNavigableSet
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTSortedMap
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTNavigableMap
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTQueue
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTIterator
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTListIterator
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTEnumeration
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTSpliterator
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTComparator
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTArrayList
}
