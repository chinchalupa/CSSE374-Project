digraph G {

fontname = "Bitstream Vera Sans"
fontsize = 8
rankdir=BT

node [shape = "record" ]
ClassTCollections [label = "{Collections|BINARYSEARCH_THRESHOLD : int\lREVERSE_THRESHOLD : int\lSHUFFLE_THRESHOLD : int\lFILL_THRESHOLD : int\lROTATE_THRESHOLD : int\lCOPY_THRESHOLD : int\lREPLACEALL_THRESHOLD : int\lINDEXOFSUBLIST_THRESHOLD : int\lr : Random\lEMPTY_SET : Set\lEMPTY_LIST : List\lEMPTY_MAP : Map\l|<init>() : void\lsort(List) : void\lsort(List, Comparator) : void\lbinarySearch(List, Object) : int\lindexedBinarySearch(List, Object) : int\literatorBinarySearch(List, Object) : int\lget(ListIterator, int) : Object\lget(ListIterator, int) : java.lang.Object\lbinarySearch(List, Object, Comparator) : int\lindexedBinarySearch(List, Object, Comparator) : int\literatorBinarySearch(List, Object, Comparator) : int\lreverse(List) : void\lswap(List, intint) : void\lshuffle(List) : void\lshuffle(List, Random) : void\lswap(Object[], intint) : void\lfill(List, Object) : void\lcopy(ListList) : void\lmin(Collection) : java.lang.Object\lmin(Collection, Comparator) : java.lang.Object\lmax(Collection) : java.lang.Object\lmax(Collection, Comparator) : java.lang.Object\lrotate(List, int) : void\lrotate1(List, int) : void\lrotate2(List, int) : void\lreplaceAll(List, ObjectObject) : boolean\lindexOfSubList(ListList) : int\leq(ObjectObject) : boolean\llastIndexOfSubList(ListList) : int\lunmodifiableCollection(Collection) : Collection\lunmodifiableSet(Set) : Set\lunmodifiableSortedSet(SortedSet) : SortedSet\lunmodifiableNavigableSet(NavigableSet) : NavigableSet\lunmodifiableList(List) : List\lunmodifiableMap(Map) : Map\lunmodifiableSortedMap(SortedMap) : SortedMap\lunmodifiableNavigableMap(NavigableMap) : NavigableMap\lsynchronizedCollection(Collection) : Collection\lsynchronizedCollection(Collection, Object) : Collection\lsynchronizedSet(Set) : Set\lsynchronizedSet(Set, Object) : Set\lsynchronizedSortedSet(SortedSet) : SortedSet\lsynchronizedNavigableSet(NavigableSet) : NavigableSet\lsynchronizedList(List) : List\lsynchronizedList(List, Object) : List\lsynchronizedMap(Map) : Map\lsynchronizedSortedMap(SortedMap) : SortedMap\lsynchronizedNavigableMap(NavigableMap) : NavigableMap\lcheckedCollection(Collection, Class) : Collection\lzeroLengthArray(Class) : java.lang.Object[]\lcheckedQueue(Queue, Class) : Queue\lcheckedSet(Set, Class) : Set\lcheckedSortedSet(SortedSet, Class) : SortedSet\lcheckedNavigableSet(NavigableSet, Class) : NavigableSet\lcheckedList(List, Class) : List\lcheckedMap(Map, ClassClass) : Map\lcheckedSortedMap(SortedMap, ClassClass) : SortedMap\lcheckedNavigableMap(NavigableMap, ClassClass) : NavigableMap\lemptyIterator() : Iterator\lemptyListIterator() : ListIterator\lemptyEnumeration() : Enumeration\lemptySet() : Set\lemptySortedSet() : SortedSet\laccess$000() : NavigableSet\lemptyNavigableSet() : NavigableSet\lemptyList() : List\lemptyMap() : Map\lemptySortedMap() : SortedMap\laccess$100() : Collections$UnmodifiableNavigableMap$EmptyNavigableMap\lemptyNavigableMap() : NavigableMap\lsingleton(Object) : Set\lsingletonIterator(Object) : Iterator\lsingletonSpliterator(Object) : Spliterator\lsingletonList(Object) : List\lsingletonMap(ObjectObject) : Map\lnCopies(int, Object) : List\lreverseOrder() : Comparator\lreverseOrder(Comparator) : Comparator\lenumeration(Collection) : Enumeration\llist(Enumeration) : ArrayList\lfrequency(Collection, Object) : int\ldisjoint(CollectionCollection) : boolean\laddAll(Collection, Object[]) : boolean\lnewSetFromMap(Map) : Set\lasLifoQueue(Deque) : Queue\l<clinit>() : void\l}"]
node [shape = "record" ]
ClassTObject [label = "{Object||}"]
node [shape = "record" ]
ClassTRandomAccess [label = "{RandomAccess||}"]
node [shape = "record" ]
ClassTComparable [label = "{Comparable||}"]
node [shape = "record" ]
ClassTRandom [label = "{Random||<init>() : void\lnextInt(int) : int\l}"]
node [shape = "record" ]
ClassTIndexOutOfBoundsException [label = "{IndexOutOfBoundsException||}"]
node [shape = "record" ]
ClassTCollections$UnmodifiableCollection [label = "{Collections$UnmodifiableCollection||}"]
node [shape = "record" ]
ClassTCollections$UnmodifiableSet [label = "{Collections$UnmodifiableSet||}"]
node [shape = "record" ]
ClassTCollections$UnmodifiableSortedSet [label = "{Collections$UnmodifiableSortedSet||}"]
node [shape = "record" ]
ClassTCollections$UnmodifiableNavigableSet [label = "{Collections$UnmodifiableNavigableSet||}"]
node [shape = "record" ]
ClassTCollections$UnmodifiableRandomAccessList [label = "{Collections$UnmodifiableRandomAccessList||}"]
node [shape = "record" ]
ClassTCollections$UnmodifiableList [label = "{Collections$UnmodifiableList||}"]
node [shape = "record" ]
ClassTCollections$UnmodifiableMap [label = "{Collections$UnmodifiableMap||}"]
node [shape = "record" ]
ClassTCollections$UnmodifiableSortedMap [label = "{Collections$UnmodifiableSortedMap||}"]
node [shape = "record" ]
ClassTCollections$UnmodifiableNavigableMap [label = "{Collections$UnmodifiableNavigableMap||}"]
node [shape = "record" ]
ClassTCollections$SynchronizedCollection [label = "{Collections$SynchronizedCollection||}"]
node [shape = "record" ]
ClassTCollections$SynchronizedSet [label = "{Collections$SynchronizedSet||}"]
node [shape = "record" ]
ClassTCollections$SynchronizedSortedSet [label = "{Collections$SynchronizedSortedSet||}"]
node [shape = "record" ]
ClassTCollections$SynchronizedNavigableSet [label = "{Collections$SynchronizedNavigableSet||}"]
node [shape = "record" ]
ClassTCollections$SynchronizedRandomAccessList [label = "{Collections$SynchronizedRandomAccessList||}"]
node [shape = "record" ]
ClassTCollections$SynchronizedList [label = "{Collections$SynchronizedList||}"]
node [shape = "record" ]
ClassTCollections$SynchronizedMap [label = "{Collections$SynchronizedMap||}"]
node [shape = "record" ]
ClassTCollections$SynchronizedSortedMap [label = "{Collections$SynchronizedSortedMap||}"]
node [shape = "record" ]
ClassTCollections$SynchronizedNavigableMap [label = "{Collections$SynchronizedNavigableMap||}"]
node [shape = "record" ]
ClassTCollections$CheckedCollection [label = "{Collections$CheckedCollection||}"]
node [shape = "record" ]
ClassTObject [label = "{Object||}"]
node [shape = "record" ]
ClassTObject [label = "{Object||}"]
node [shape = "record" ]
ClassTCollections$CheckedQueue [label = "{Collections$CheckedQueue||}"]
node [shape = "record" ]
ClassTCollections$CheckedSet [label = "{Collections$CheckedSet||}"]
node [shape = "record" ]
ClassTCollections$CheckedSortedSet [label = "{Collections$CheckedSortedSet||}"]
node [shape = "record" ]
ClassTCollections$CheckedNavigableSet [label = "{Collections$CheckedNavigableSet||}"]
node [shape = "record" ]
ClassTCollections$CheckedRandomAccessList [label = "{Collections$CheckedRandomAccessList||}"]
node [shape = "record" ]
ClassTCollections$CheckedList [label = "{Collections$CheckedList||}"]
node [shape = "record" ]
ClassTCollections$CheckedMap [label = "{Collections$CheckedMap||}"]
node [shape = "record" ]
ClassTCollections$CheckedSortedMap [label = "{Collections$CheckedSortedMap||}"]
node [shape = "record" ]
ClassTCollections$CheckedNavigableMap [label = "{Collections$CheckedNavigableMap||}"]
node [shape = "record" ]
ClassTCollections$SingletonSet [label = "{Collections$SingletonSet||}"]
node [shape = "record" ]
ClassTCollections$1 [label = "{Collections$1||}"]
node [shape = "record" ]
ClassTCollections$2 [label = "{Collections$2||}"]
node [shape = "record" ]
ClassTCollections$SingletonList [label = "{Collections$SingletonList||}"]
node [shape = "record" ]
ClassTCollections$SingletonMap [label = "{Collections$SingletonMap||}"]
node [shape = "record" ]
ClassTIllegalArgumentException [label = "{IllegalArgumentException||}"]
node [shape = "record" ]
ClassTStringBuilder [label = "{StringBuilder||}"]
node [shape = "record" ]
ClassTCollections$CopiesList [label = "{Collections$CopiesList||}"]
node [shape = "record" ]
ClassTCollections$ReverseComparator2 [label = "{Collections$ReverseComparator2||}"]
node [shape = "record" ]
ClassTCollections$3 [label = "{Collections$3||}"]
node [shape = "record" ]
ClassTArrayList [label = "{ArrayList||<init>() : void\ladd(Object) : boolean\l}"]
node [shape = "record" ]
ClassTSet [label = "{Set||}"]
node [shape = "record" ]
ClassTCollections$SetFromMap [label = "{Collections$SetFromMap||}"]
node [shape = "record" ]
ClassTCollections$AsLIFOQueue [label = "{Collections$AsLIFOQueue||}"]
node [shape = "record" ]
ClassTCollections$EmptySet [label = "{Collections$EmptySet||}"]
node [shape = "record" ]
ClassTCollections$EmptyList [label = "{Collections$EmptyList||}"]
node [shape = "record" ]
ClassTCollections$EmptyMap [label = "{Collections$EmptyMap||}"]
edge [arrowhead = empty style = solid ]
ClassTCollections -> ClassTObject
edge [arrowhead = vee style = dashed ]
ClassTCollections -> ClassTRandom
edge [arrowhead = vee style = dashed ]
ClassTCollections -> ClassTSet
edge [arrowhead = vee style = dashed ]
ClassTCollections -> ClassTList
edge [arrowhead = vee style = dashed ]
ClassTCollections -> ClassTMap
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTCollection
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTSortedSet
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTNavigableSet
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTSortedMap
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTNavigableMap
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTQueue
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTIterator
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTListIterator
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTEnumeration
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTSpliterator
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTComparator
edge [arrowhead = vee style = solid ]
ClassTCollections -> ClassTArrayList
}
